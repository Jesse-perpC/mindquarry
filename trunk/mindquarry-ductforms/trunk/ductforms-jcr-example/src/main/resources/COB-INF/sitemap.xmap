<?xml version="1.0" encoding="UTF-8"?>
<!--
	Copyright 2006 The Apache Software Foundation
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
-->
<map:sitemap xmlns:map="http://apache.org/cocoon/sitemap/1.0">
	<map:components>
		<map:serializers>
			<map:serializer logger="sitemap.serializer.html"
				mime-type="text/html" name="html" pool-max="32"
				src="org.apache.cocoon.serialization.HTMLSerializer">
				<doctype-public>
					-//W3C//DTD HTML 4.01 Transitional//EN
				</doctype-public>
				<doctype-system>
					http://www.w3.org/TR/html4/loose.dtd
				</doctype-system>
				<encoding>UTF-8</encoding>
			</map:serializer>
		</map:serializers>
		<map:transformers default="xslt">
    <!--
			<map:transformer logger="sitemap.transformer.xmldb"
				name="xmldb"
				src="org.apache.cocoon.transformation.XMLDBTransformer">
				<driver>
					org.apache.xindice.client.xmldb.embed.DatabaseImpl
				</driver>
				<base>xmldb:xindice-embed:///db</base>
			</map:transformer>
    -->

			<!-- the browser-update transformer is needed for AJAX -->
			<map:transformer name="browser-update"
				src="org.apache.cocoon.ajax.BrowserUpdateTransformer" />
			<!-- this is obviously for internationalization -->
			<map:transformer name="i18n"
				src="org.apache.cocoon.transformation.I18nTransformer">
				<!-- neccessary resources for internationalization -->
				<catalogues default="other">
					<catalogue id="other" name="OtherMessages"
						location="messages" />
					<catalogue id="forms" name="messages"
						location="resource://org/apache/cocoon/forms/system/i18n" />
				</catalogues>
				<cache-at-startup>true</cache-at-startup>
			</map:transformer>


		</map:transformers>

		<map:selectors>
			<!-- this selector returns true if there is an ajax request -->
			<map:selector name="ajax-request"
				src="org.apache.cocoon.ajax.AjaxRequestSelector" />
		</map:selectors>

	</map:components>

	<map:flow language="javascript">
		<map:script src="ductforms.js" />
	</map:flow>

	<map:pipelines>
		<map:pipeline type="noncaching">

			<!-- the aggregation of all datamodel desctiptions available in the system -->
			<map:match pattern="model.xml">
				<map:generate src="model" type="directory" />
				<map:transform src="xslt/ductforms/directory2model.xsl" />
				<map:transform type="xinclude" />
				<map:serialize type="xml" />
			</map:match>
			<!-- the aggregation of all query model descriptions available -->
			<map:match pattern="query.xml">
				<map:generate src="query" type="directory" />
				<map:transform src="xslt/ductforms/directory2model.xsl" />
				<map:transform type="xinclude" />
				<map:serialize type="xml" />
			</map:match>

			<!-- the raw content of the xml document, only for further processing and debugging -->
			<map:match pattern="*.xml.raw">
				<map:generate
					src="jcr:///test/{1}.xml" />
				<map:serialize type="xml" />
			</map:match>
			
			<!--+ the true content of the model, here required fields have been added and
				| redundant declaration of the fields included is added
				+-->
			<map:match pattern="*.xml.plain">
				<map:select type="resource-exists">
					<!-- if it exists, show the list of jobs -->
					<map:when
						test="jcr:///test/{1}.xml">
						<map:generate
							src="jcr:///test/{1}.xml" />
						<map:transform
							src="xslt/ductforms/addfield.xsl" />
						<map:serialize type="xml" />
					</map:when>
					<map:otherwise>
						<map:generate src="cocoon:/model.xml" />
						<map:transform
							src="xslt/ductforms/plainmodel.xsl" />
						<map:serialize type="xml" />
					</map:otherwise>
				</map:select>
			</map:match>
			
			<!--+ the aggregation of the plain instance (data of the document)
				| and the aggregated models. This includes everything that is
				| and could be.
			 	+-->
			<map:match pattern="*.xml.model">
				<map:generate src="cocoon:/model.xml" />
				<map:transform
					src="xslt/ductforms/model2modelinclude.xsl">
					<map:parameter name="instance"
						value="cocoon:/{1}.xml.plain">
					</map:parameter>
				</map:transform>
				<map:transform type="xinclude" />
				<map:transform src="xslt/ductforms/cleanmodel.xsl" />
				<map:serialize type="xml" />
			</map:match>

			<!--+ the generated form model including all possible fields  -->
			<map:match pattern="*.xml.form">
				<map:generate src="cocoon:/{1}.xml.model" />
				<map:transform
					src="xslt/ductforms/modelincluded2form.xsl" />
				<map:serialize type="xml" />
			</map:match>

			<!-- the generated form template including only the selected fields -->
			<map:match pattern="*.xml.template">
				<map:generate src="cocoon:/{1}.xml.model" />
				<map:transform
					src="xslt/ductforms/modelincluded2template.xsl" />
				<map:serialize type="xml" />
			</map:match>

			<!-- the form instance, or the document in edit mode -->
			<map:match pattern="*.xml.edit">
				<map:call function="handleForm">
					<map:parameter name="function" value="editPage" />
					<map:parameter name="page" value="{1}" />
					<!-- in the original example this was configurable -->
					<!-- <map:parameter name="renderMode" value="jx" /> -->
					<map:parameter name="definitionURI"
						value="cocoon:/{1}.xml.form" />
				</map:call>
			</map:match>
			<!-- the document in presentation mode -->
			<map:match pattern="*.xml">
				<map:select type="resource-exists">
					<!-- if it exists, show the list of jobs -->
					<map:when
						test="jcr:///test/{1}.xml">
						<map:call function="handleForm">
							<map:parameter name="function"
								value="showPage" />
							<map:parameter name="page" value="{1}" />
							<!-- in the original example this was configurable -->
							<!-- <map:parameter name="renderMode" value="jx" /> -->
							<map:parameter name="definitionURI"
								value="cocoon:/{1}.xml.form" />
						</map:call>
					</map:when>
					<map:otherwise>
						<map:redirect-to uri="{1}.xml.edit" />
					</map:otherwise>
				</map:select>
			</map:match>

			<map:match pattern="*.query.raw">
				<!--<map:generate type="directory" src="jcr:///test">
          <map:parameter name="depth" value="2"/>
        </map:generate>-->
				<map:generate src="jcr:///test" />
				<!--<map:transform src="xslt/jcr/collection2new.xsl" />
				<map:transform
					src="xslt/jcr/collection2aggregate.xsl" />
				<map:transform type="cinclude" />-->
				<map:serialize type="xml" />
			</map:match>

			<map:match pattern="*.query.xsl">
				<map:generate src="query/{1}.xsl" />
				<map:transform src="xslt/ductforms/query2xsl.xsl" />
				<map:serialize type="xml" />
			</map:match>

			<map:match pattern="*.query">
				<map:generate src="cocoon:/{1}.query.raw" />
				<map:transform src="cocoon:/{1}.query.xsl" />
				<map:serialize type="html" />
			</map:match>

			<map:match pattern="">
				<!-- test for existance of a database collection -->
				<map:select type="resource-exists">
					<!-- if it exists, show the list of jobs -->
					<map:when test="jcr:///test/">
						<map:redirect-to uri="index.query" />
					</map:when>
					<map:otherwise>
						<map:generate src="jcr/populate.xml" />
						<map:transform type="write-source" />
						<map:transform
							src="xslt/jcr/populate2html.xsl" />
						<map:serialize type="html" />
					</map:otherwise>
				</map:select>
			</map:match>


			<map:match pattern="*.xml.instance">
				<map:generate type="jx" src="cocoon:/{1}.xml.template"
					label="content1">
					<map:parameter name="locale"
						value="{flow-attribute:locale}" />
				</map:generate>

				<map:transform src="xslt/ductforms/instance2html.xsl">
					<map:parameter name="page" value="{1}" />
				</map:transform>

				<map:transform src="xslt/forms/form2html.xsl">
					<map:parameter name="resources-uri"
						value="{request:contextPath}/_cocoon/resources" />
				</map:transform>

				<map:transform type="nekohtml">
					<map:parameter name="tags" value="htmllize" />
				</map:transform>

				<map:transform src="xslt/forms/htmllize.xsl" />

				<map:serialize type="html" />
			</map:match>


			<map:match pattern="resources/*/**">
				<map:read src="{1}/{2}" />
			</map:match>

			<!-- Continue a scenario. The continuation id is passed in the URL
				(typically used for GET requests) -->
			<map:match pattern="*.continue">
				<map:call continuation="{1}" />
			</map:match>

			<!-- Continue a scenario. The continuation id is passed as a request
				parameter (typically used for POST request) -->
			<map:match pattern="continue">
				<map:call continuation="{1}" />
			</map:match>

		</map:pipeline>


	</map:pipelines>

</map:sitemap>

