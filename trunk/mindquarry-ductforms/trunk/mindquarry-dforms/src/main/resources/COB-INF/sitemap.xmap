<?xml version="1.0" encoding="UTF-8"?>
<!--
	Copyright (C) 2006 MindQuarry GmbH, All Rights Reserved
-->
<sitemap xmlns="http://apache.org/cocoon/sitemap/1.0">

	<!-- DFORMS -->

	<components>
		<actions>
			<action name="log"
				src="com.mindquarry.webapp.acting.DebugLogAction" />
			<action name="log-params"
				src="com.mindquarry.webapp.acting.LogParametersAction" />
			<action name="request"
				src="org.apache.cocoon.acting.RequestParamAction" />
		</actions>

		<generators default="file">
			<generator name="collection"
				src="org.apache.cocoon.generation.TraversableGenerator" />
		</generators>

		<serializers>
			<!-- <serializer logger="sitemap.serializer.html"
				mime-type="text/html" name="html" pool-max="32"
				src="org.apache.cocoon.serialization.HTMLSerializer">
				<doctype-public>
				-//W3C//DTD HTML 4.01 Transitional//EN
				</doctype-public>
				<doctype-system>
				http://www.w3.org/TR/html4/loose.dtd
				</doctype-system>
				<encoding>UTF-8</encoding>
				</serializer> -->
		</serializers>

		<selectors>
			<selector name="lightbox-request"
				src="com.mindquarry.webapp.ajax.LightboxRequestSelector" />
			<selector name="ajax-request"
				src="org.apache.cocoon.ajax.AjaxRequestSelector" />
		</selectors>
	</components>

	<resources>
		<resource name="directories2model">
			<transform src="xsl/model/wrap-as-model.xsl" />
			<transform type="include" />
			<transform src="xsl/model/sort-model.xsl" />
			<serialize type="xml" />
		</resource>
	</resources>

	<flow language="javascript">
		<script src="flows/ductforms.js" />
	</flow>

	<views>
		<view name="form" from-label="form">
			<serialize type="xml" />
		</view>
		<view name="viewA" from-label="viewA">
			<serialize type="xml" />
		</view>
		<view name="viewB" from-label="viewB">
			<serialize type="xml" />
		</view>
	</views>

	<pipelines>
		<pipeline type="noncaching">

			<!-- internal -->
			<!-- TODO: rename this or the other, file-specific matchers
				(eg. *.xml) so that there is no clash between mytask24.xml
				and this generic model provider here
				
				Note: this is also referenced via cocoon:/model.xml in
				addfield.xsl -->
			<match pattern="model.xml">
				<generate src="block:/dforms-model-directory.xml" />
				<call resource="directories2model" />
			</match>

			<!-- internal -->
			<!-- @virtual: getting basic model stuff -->
			<match pattern="dforms-model-directory.xml">
				<generate type="collection" src="model" />
				<transform src="xsl/collection2resourceincludes.xsl" />
				<serialize type="xml" />
			</match>

			<!-- internal -->
			<!-- for child blocks to create includes of files in directories
				with the correct block:/resource/* source format -->
			<match pattern="collection2resourceincludes.xsl">
				<read src="xsl/collection2resourceincludes.xsl" />
			</match>

			<!--+ the true content of the model, here required fields have been added and
				| redundant declaration of the fields included is added
				+-->
			<match pattern="*.xml.plain">
				<select type="resource-exists">
					<!-- if it exists, show the document -->
					<when
						test="{request-param:baseURI}{request-param:documentID}.xml">
						<generate
							src="{request-param:baseURI}{request-param:documentID}.xml" />
						<transform src="xsl/model/addfield.xsl" />
						<serialize type="xml" />
					</when>
					<!-- else (if not) show the minimal document model including the required fields from the complete model -->
					<otherwise>
						<generate src="cocoon:/model.xml" />
						<transform src="xsl/model/plainmodel.xsl" />
						<serialize type="xml" />
					</otherwise>
				</select>
			</match>

			<!-- internal -->
			<!--+ the aggregation of the plain instance (data of the document)
				| and the aggregated models. This includes everything that is
				| and could be.
				+-->
			<match pattern="*.xml.model">
				<generate src="cocoon:/model.xml" />
				<transform src="xsl/model/model2modelinclude.xsl" label="viewA">
					<parameter name="instance"
						value="cocoon:/{1}.xml.plain">
					</parameter>
				</transform>
				<transform type="xinclude"/>
				<transform src="xsl/model/cleanmodel.xsl" label="viewB"/>
				<serialize type="xml" />
			</match>

			<!-- internal -->
			<!-- the generated form model including all possible fields  -->
			<match pattern="*.xml.form">
				<generate src="cocoon:/{1}.xml.model" />
				<transform src="xsl/model/modelincluded2form.xsl" />
				<serialize type="xml" />
			</match>

			<!-- internal -->
			<!-- the generated form template including only the selected fields -->
			<match pattern="*.xml.template">
				<generate src="cocoon:/{1}.xml.model" />
				<transform
					src="xsl/model/modelincluded2template.xsl">
					<parameter name="documentID"
						value="{request-param:documentID}" />
				</transform>
				<serialize type="xml"/>
			</match>

			<!-- internal -->
			<!-- the form rendering pipeline called by the form controller -->
			<match pattern="*.xml.instance">

				<!-- <generate src="cocoon:/{1}.xml.template" /> -->
				<!-- get the form template from a dynamic pipeline -->
				<generate type="jx" src="cocoon:/{1}.xml.template"
					label="form">
					<parameter name="locale"
						value="{flow-attribute:locale}" />
				</generate>

				<!-- beautify our forms -->
				<!-- TODO: this could be overriden by the children -->
				<transform src="xsl/instance2html.xsl">
					<parameter name="baseURI"
						value="{request-param:baseURI}" />
					<parameter name="documentID"
						value="{request-param:documentID}" />
				</transform>

				<!-- standard cocoon form2html stylesheet + dojo-editor -->
				<transform src="xsl/forms/form2html.xsl">
					<parameter name="fullPath"
						value="{request-param:callerFullPath}" />
					<parameter name="sitemapPath"
						value="{request-param:callerSitemapPath}" />
				</transform>

				<!-- convert escaped html in dojo-editor content (marked with
					htmllize tags) into real html (nekohtml from cocoon-html) -->
				<transform type="nekohtml">
					<parameter name="tags" value="htmllize" />
				</transform>
				
				<transform src="xsl/remove-htmllize.xsl" />

				<serialize type="xml" />
			</match>

			<!-- internal, for child -->
			<match pattern="show-document">
				<!-- <read src="cocoon:/{request-param:documentID}.xml.template" />-->
				<call function="handleForm">
					<parameter name="function" value="showPage" />
					<parameter name="baseURI"
						value="{request-param:baseURI}" />
					<parameter name="documentID"
						value="{request-param:documentID}" />
					<parameter name="definitionURI"
						value="block:/{request-param:documentID}.xml.form" />
				</call>
			</match>

			<!-- internal, for child -->
			<match pattern="edit-document">
				<call function="handleForm">
					<parameter name="function" value="editPage" />
					<parameter name="baseURI"
						value="{request-param:baseURI}" />
					<parameter name="documentID"
						value="{request-param:documentID}" />
					<parameter name="definitionURI"
						value="cocoon:/{request-param:documentID}.xml.form" />
				</call>
			</match>

			<!-- internal, for child -->
			<match pattern="show-or-edit-document">
				<select type="resource-exists">
					<!-- if it exists, show the document  -->
					<when
						test="{request-param:baseURI}{request-param:documentID}.xml">
						<read src="cocoon:/show-document" />
					</when>
					<!-- else edit the document -->
					<otherwise>
						<read src="cocoon:/edit-document" />
					</otherwise>
				</select>
			</match>

			<!-- internal, for child to retrieve xml -->
			<match pattern="document">
				<read src="cocoon:/{request-param:documentID}.xml.plain" />
			</match>
			
			<!-- =========================================================== -->

			<!-- Continue a scenario. The continuation id is passed in the URL
				(typically used for GET requests) -->
			<match pattern="*.continue">
				<call continuation="{1}" />
			</match>

			<!-- Continue a scenario. The continuation id is passed as a request
				parameter (typically used for POST request) -->
			<match pattern="continue">
				<call continuation="{1}" />
			</match>

			<!-- =========================================================== -->

			<!-- @virtual: for inheriting sitemap resources -->
			<match pattern="resource/**">
				<read src="{1}" />
			</match>

		</pipeline>

	</pipelines>

</sitemap>

