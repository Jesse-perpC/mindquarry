<?xml version="1.0" encoding="UTF-8"?>
<!--
	Copyright (C) 2006 MindQuarry GmbH, All Rights Reserved
-->

<!--+
    | Cocoon web-app configurations file for the full Mindquarry webapp
    +-->

<!DOCTYPE web-app
    PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
    "http://java.sun.com/dtd/web-app_2_3.dtd">

<web-app>

  <!-- Context Configuration ========================================== -->

  <!--+
      | Set a context property useful to allow you to ProxyPass your
      | web application mounted to a different URI without loosing the
      | ability to do cookie-based sessions.
      | WARNING: this is Jetty specific!
      +-->
  <!--context-param>
    <param-name>org.mortbay.jetty.servlet.SessionPath</param-name>
    <param-value>/some/path/to/your/webapp</param-value>
    <description>An override of the session cookie path</description>
   </context-param-->

  <!-- Servlet Filters ================================================ -->

  <!--+
      | Declare a filter for multipart MIME handling
      +-->

  <filter>
  	<filter-name>CocoonMultipartFilter</filter-name>
  	<display-name>Cocoon multipart filter</display-name>
  	<description>Multipart MIME handling filter for Cocoon</description>
  	<filter-class>org.apache.cocoon.servlet.multipart.MultipartFilter</filter-class>
  </filter>
  
  
    <!--+
      | Declare a filter for authentication
      +-->

  <filter>
  	<filter-name>MindquarryAuthenticationFilter</filter-name>
  	<display-name>Mindquarry Authentication filter</display-name>
  	<filter-class>com.mindquarry.webapp.servlet.AuthenticationFilter</filter-class>
  	<init-param>
  		<param-name>realm</param-name>
  		<param-value>Mindquarry Server</param-value>
  	</init-param>
  </filter>

  <!--+
      | Declare a filter for debugging incomming request
      +-->

<!-- <filter>
  	<filter-name></filter-name>
  	<display-name>Cocoon debug filter</display-name>
  	<description>Log debug information about each request</description>
  	<filter-class>org.apache.cocoon.servlet.DebugFilter</filter-class>
  </filter> -->

  <!-- Filter mappings ================================================ -->

  <!--+
      | Use the Cocoon multipart filter together with the Cocoon demo webapp
      +-->

  <filter-mapping>
  	<filter-name>CocoonMultipartFilter</filter-name>
  	<servlet-name>CocoonBlocksDispatcherServlet</servlet-name>
  </filter-mapping>
  
  <filter-mapping>
  	<filter-name>MindquarryAuthenticationFilter</filter-name>
  	<servlet-name>CocoonBlocksDispatcherServlet</servlet-name>
  </filter-mapping>

  <!--+
      | Use the Cocoon debug filter together with the Cocoon demo webapp

  <filter-mapping>
  	<filter-name>CocoonDebugFilter</filter-name>
  	<servlet-name>Cocoon</servlet-name>
  </filter-mapping>
      +-->

  <!-- Servlet Context Listener ======================================= -->

  <!--+
      | Declare a context listener that sets up the Cocoon Spring bean factory
      | and makes it available as a context parameter.
      +-->
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>

  <!-- Servlet Configuration ========================================== -->

<!--   <servlet>
    <servlet-name>CocoonRootSitemapServlet</servlet-name>
    <display-name>Cocoon</display-name>
    <description>Mindquarry Webapplication - Cocoon servlet</description>

    <servlet-class>org.apache.cocoon.servlet.SitemapServlet</servlet-class>

    <load-on-startup>1</load-on-startup>
  </servlet> -->

  <!-- Servlet that dispatches to Spring managed block servlets -->
  <servlet>
    <servlet-name>CocoonBlocksDispatcherServlet</servlet-name>
    <display-name>DispatcherServlet</display-name>
    <description>Cocoon blocks dispatcher</description>

    <servlet-class>org.apache.cocoon.blocks.DispatcherServlet</servlet-class>

    <load-on-startup>1</load-on-startup>
  </servlet>

  <!-- URL space mappings ============================================= -->

  <!-- <servlet-mapping>
    <servlet-name>CocoonRootSitemapServlet</servlet-name>
    <url-pattern>/</url-pattern>
  </servlet-mapping> -->

  <!--
    Mount the blocks dispatcher. It handles everything at the root.
  -->
  <servlet-mapping>
    <servlet-name>CocoonBlocksDispatcherServlet</servlet-name>
    <url-pattern>/*</url-pattern>
  </servlet-mapping>

  <!--
    Some servlet engines (Tomcat) have defaults which are not overriden
    by '/' mapping, but must be overriden explicitly.
  -->
  <servlet-mapping>
    <servlet-name>CocoonBlocksDispatcherServlet</servlet-name>
    <url-pattern>*.jsp</url-pattern>
  </servlet-mapping>
  <!--
    Some servlet engines (WebLogic) have defaults which are not overriden
    by '/' mapping, but must be overriden explicitly.
  -->
  <servlet-mapping>
    <servlet-name>CocoonBlocksDispatcherServlet</servlet-name>
    <url-pattern>*.html</url-pattern>
  </servlet-mapping>

  <!-- various MIME type mappings ====================================== -->

  <mime-mapping>
    <extension>css</extension>
    <mime-type>text/css</mime-type>
  </mime-mapping>

  <mime-mapping>
    <extension>xml</extension>
    <mime-type>text/xml</mime-type>
  </mime-mapping>

  <mime-mapping>
    <extension>xsl</extension>
    <mime-type>text/xml</mime-type>
  </mime-mapping>

  <mime-mapping>
    <extension>xconf</extension>
    <mime-type>text/xml</mime-type>
  </mime-mapping>

  <mime-mapping>
    <extension>xmap</extension>
    <mime-type>text/xml</mime-type>
  </mime-mapping>

  <mime-mapping>
    <extension>ent</extension>
    <mime-type>text/plain</mime-type>
  </mime-mapping>

  <mime-mapping>
    <extension>grm</extension>
    <mime-type>text/plain</mime-type>
  </mime-mapping>
</web-app>