<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright (C) 2006-2007 Mindquarry GmbH, All Rights Reserved

  The contents of this file are subject to the Mozilla Public License
  Version 1.1 (the "License"); you may not use this file except in
  compliance with the License. You may obtain a copy of the License at
  http://www.mozilla.org/MPL/

  Software distributed under the License is distributed on an "AS IS"
  basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
  License for the specific language governing rights and limitations
  under the License.
-->
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<article class="specification" lang="en" status="draft">
  <articleinfo>
    <title>Mindquarry Software Development Process</title>

    <subtitle>Description of the Mindquarry Software Development
    Process</subtitle>

    <abstract>
      <para>The paper in hand defines the Open Source software development
      process, quality assurance and general guidelines of Mindquarry. After
      the requirements are explained, the development process as well as its
      roles are described in detail. Finally quality assurance mechanisms and
      the rules that are applied to the software development are
      presented.</para>
    </abstract>

    <author>
      <firstname>Alexander</firstname>

      <surname>Saar</surname>

      <affiliation>
        <jobtitle>Chief Technology Officer</jobtitle>

        <orgname>Mindquarry GmbH</orgname>
      </affiliation>
    </author>

    <author>
      <firstname>Alexander</firstname>

      <surname>Klimetschek</surname>

      <affiliation>
        <jobtitle>Chief Architect Mindquarry GmbH</jobtitle>
      </affiliation>
    </author>

    <address>August-Bebel-Str. 88, D-14482 Potsdam</address>

    <date>28. February 2007</date>

    <copyright>
      <year>2006-2007</year>

      <holder>Mindquarry GmbH</holder>
    </copyright>

    <releaseinfo>Version 1.0 (draft - subject to change during the second
    release cycle)</releaseinfo>
  </articleinfo>

  <section>
    <title>Introduction</title>

    <para>This document describes the software development process as it is
    implemented within Mindquarry and the surrounding community that drives
    the development of Mindquarry's software products. The aim of this
    document is the provision of a clear and transparent definition of the
    process that is used for development of Mindquarry's products, thus
    allowing all stakeholders like users, developers or customers to
    understand how people can support the community and how Mindquarry
    achieves it's high quality pretensions.</para>

    <para>The definition of the process is based on reviews of the development
    processes of popular open source projects like <ulink
    url="http://www.eclipse.org/projects/dev_process/">Eclipse</ulink>, the
    <ulink url="http://www.apache.org/foundation/how-it-works.html">Apache
    Foundation</ulink> and <ulink
    url="http://developer.gnome.org/">Gnome</ulink>. You will find several
    parts from the development strategy of these projects within this
    document. We consider these parts as best of breed in current open source
    software development.</para>

    <section>
      <title>Process Requirements</title>

      <para>The process should follow the principles of agile software
      development. This implies that the process allows high flexibility,
      because the environment and requirements change often and the process
      must be able to handle such changes. Second, the process must allow
      participation of external developers and other community members like
      users of the software and customers of Mindquarry. For a detailed
      description of all roles present in the process see <xref
      linkend="roles" />.</para>

      <para>Finally the most important requirement is that the process must
      lead to the provision of a stable and highly usable software product,
      which means it should include quality assurance and intensive testing
      steps. Additionally it is important that success, namely the provision
      of a stable and usable product, must be repeatable.</para>
    </section>
  </section>

  <section>
    <title>Process Definition</title>

    <para>This section gives an overview of the whole process including all
    steps and the tasks that have to be applied during an iteration. The
    process itself is an iterative development process that leads to the
    release of a new product version after each iteration. The length of each
    iteration depends on the actual requirements that should be implemented
    during the iteration, but the length should be ideally between 2 and 5
    months. Figure <xref linkend="process-overview" /> shows an overview of
    the whole process while the individual steps of the process are described
    below.</para>

    <figure id="process-overview">
      <title>Process Overview</title>

      <mediaobject>
        <imageobject role="html">
          <imagedata fileref="images/dev-process-overview.png" format="PNG" />
        </imageobject>

        <imageobject role="fo">
          <imagedata fileref="images/dev-process-overview.png" format="PNG"
                     width="12cm" />
        </imageobject>
      </mediaobject>
    </figure>

    <section id="phase-evaluation">
      <title>Evaluation Phase</title>

      <para>The evaluation phase is the first part of the process. It takes
      place when a new process iteration starts. In this phase feedback from
      developers and customers is analysed, requirements and feature ideas are
      collected and evaluated by the <glossterm>Project Management
      Committee</glossterm> (<abbrev>PMC</abbrev>). This gives a list of all
      possible goals for the next release. By estimating the expenditures for
      the features and asking users for their needs, the goals are weighted by
      the PMC. This results in the list of actual goals for this release
      cycle.</para>

      <para>Additionally several quality goals for functions, performance and
      usability are defined, too. Please see the section about <link
      linkend="qa">quality assurance</link> (QA) for more information about
      quality goals and quality assurance. The collected information is also
      used for redefinition of the process, if lessons learned from the
      previous period or actual conditions require such a change.</para>
    </section>

    <section>
      <title>Implementation Phase</title>

      <para>During the implementation phase new features specified in the
      evaluation phase are designed and implemented. With the goals stated,
      backend implementation, bug-fixing and other non-user-interface related
      work can start. This gives freedom for all external contributors to
      integrate their patches. For the user-interface part a user-centered
      design process is done before any implemenation.</para>

      <section>
        <title>User-Centered Design</title>

        <para>This creative and iterative process designs the actual user
        interfaces needed to fullfil the stated goals by using a cycle of
        paper prototyping, user tests and improvement of the designs based on
        the user feedback. The team for the process is chosen by Mindquarry
        and should contain different skills to increase the creativity and
        experience needed for brainstorming, problem solution and interface
        designing. The output of this process is a design document that
        includes sketches and descriptions of the user interface and notes
        that minimize misinterpretions for developers.</para>
      </section>

      <section>
        <title>Implementation</title>

        <para>Implementation should follow the goals and the design document.
        It also includes refactoring and redesign of the existing architecture
        if appropriate. Beside implementing new features, there should be a
        continuous consideration of performance, stability, usability and
        other quality issues (e.g. by writing unit tests).</para>

        <para>The internals of the implementation phase are not further
        specified, because there should be enough flexibility for change. At a
        certain point in time, there is a feature freeze. After that
        implementation of new features is stopped and a phase with intensive
        quality assurance is started.</para>
      </section>
    </section>

    <section>
      <title>Finalization Phase</title>

      <para>This phase includes testing, internationalization, documentation
      and the final release. These steps are described below in detail.</para>

      <section>
        <title>System Test</title>

        <para>During the system test every function that is described in the
        goals document for the current iteration has to be tested by using
        testing frameworks for web testing. Additionally some final usability
        tests with existing user should be performed. The result of the system
        testing is a user interface and string freeze, so that
        internationalization can start.</para>
      </section>

      <section>
        <title>Internationalization and Documentation</title>

        <para>Documentation is done in parallel with the implementation of new
        features, which means source documentation of public APIs, protocols
        and data formats. Additionally a feature and architecture
        documentation is created by the developers.</para>

        <para>For now, internationalization for english and german language is
        targeted by Mindquarry. Internationalization for other languages can
        be provided by the community, until this is a requirement of existing
        customers.</para>
      </section>

      <section>
        <title>Release Preparation</title>

        <para>Preparing the release includes packaging of binary and source
        release bundles for the major platforms Windows, Mac OSX and Linux and
        publishing them together with documentation and other according files
        on the Mindquarry web site.</para>
      </section>

      <section>
        <title>Freeze breaks</title>

        <para>Freeze breaks are only allowed for important reasons and with
        approval from the release team. For string freeze breaks an approval
        by the l18n team is also necessary.</para>
      </section>
    </section>
  </section>

  <section id="qa">
    <title>Quality Assurance</title>

    <para>Quality assurance in the software development process of Midquarry
    is done in several ways according to what kind of quality is considered.
    For code and functions it is done by using unit and system/integration
    testing. For layouting and internationalization issues we use human based
    reviews and inspections of the system, for which as much automization as
    possible should be implemented.</para>

    <section>
      <title>Unit and System Test</title>

      <para>Unit test are written during the development by the respective
      developers. They are executed nightly by using a continuous integration
      system called <ulink url="https://hudson.dev.java.net/">Hudson</ulink>.
      This ensures a stable development branch and allows tracking of the
      status of the current development version. To get the most out of this
      continuous integration, developers should write unit tests before
      starting with implementation of a new feature.</para>

      <para>Due to the nature of the Mindquarry system, which is mainly based
      on a rich HTML-client architecture, produced by XSLT processing and
      Javascript code, there should be an additional test mechanism that can
      handle these kind of sources. Therefore Mindquarry uses web-enabled
      system test. They are based on the <ulink url="???">Selenium</ulink>
      framework, which provides a web test environment. Selenium allows
      execution of web requests via browser proxies. This allows the reuse of
      the system tests with different kind of browsers (Internet Explorer or
      Mozilla Firefox). Additionally this concept allows testing of
      web-specific features based on concepts like AJAX, IFrames etc. Because
      not all features are automatically testable by a system like Selenium, a
      manual walk-through of the application is needed as well.</para>

      <para>Execution of the system tests within a browser implies that the
      tests consider the Mindquarry system as a black box and execute tests on
      the system in the same way a user would do. As a general rule there
      should be a system test for each feature provided by the Mindquarry
      Collaboration Server.</para>
    </section>

    <section>
      <title>Inspections and Reviews</title>

      <para>Inspections and reviews are used to ensure that the layout of the
      web interface works fine with several browsers. Furthermore QA of the
      internationalization is also part of the inspections. Problems with the
      layout should be reported directly to the developers and according web
      designers. Internationalization issues should be reported to the l18n
      team.</para>
    </section>
  </section>

  <section>
    <title>Organization &amp; Roles</title>

    <para>An essential requirement for an efficient process is a clear
    definition of the involved roles as well as the relationships between
    them. Therefore the following section describes the structure of
    Mindquarry's open source community and how the work of the community is
    organized.</para>

    <section>
      <title>Organization Structure</title>

      <para>The overall structure of Mindquarry's open source community is
      illustrated in <xref linkend="community-overview" />. The overall
      control of the Mindquarry open source project is taken by the
      <emphasis>Project Management Committee</emphasis> (PMC). The PMC
      consists of key employees from Mindquarry such as the CEO, CTO, Chief
      architect or company developers. Additonally external community members
      which hold the status of a <link
      linkend="role-committer">Committer</link> can be selected unanimously by
      the PMC members to join the PMC. The main responsibility of the PMC is
      the specification of goals, rules and requirements during the <link
      linkend="phase-evaluation">evaluation phase</link>.</para>

      <figure id="community-overview">
        <title>Community Overview</title>

        <mediaobject>
          <imageobject role="html">
            <imagedata fileref="images/organization.png" format="PNG" />
          </imageobject>

          <imageobject role="fo">
            <imagedata fileref="images/organization.png" format="PNG"
                       width="12cm" />
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section id="roles">
      <title>Community Roles</title>

      <para>This section describes the roles that are present in the
      development process of Mindquarry's community.</para>

      <section>
        <title>PMC Member</title>

        <para>A PMC member is a Committer which has provided excellent
        contributions to the evolution of the project and which was selected
        unanimously by the existing PMC members to join the PMC.</para>
      </section>

      <section>
        <title>Release Manager</title>

        <para>The Release Manager is a Committer that was selected by the PMC
        to be the person in charge for a single release cycle. He is
        responsible for managing the whole release cycle. This includes
        controlling that project rules are not ignored, focus on the
        requirements specified in the evaluation period is achieved.</para>
      </section>

      <section id="role-qamanager">
        <title>QA Manager</title>

        <para>The QA manager is a Committer that was selected by the PMC to be
        responsible for quality assurance. The QA manager controls the QA
        within a release cycle. He is responsible for ensuring that the QA
        process as described in the QA documentation is applied.</para>
      </section>

      <section>
        <title>Developer</title>

        <para>A Developer is a user who contributes to Mindquarry in the form
        of code or documentation. They take extra steps to participate in a
        project, are active on the developer mailing list, participate in
        discussions, provide patches, documentation, suggestions, and
        criticism. Developers are also known as contributors.</para>
      </section>

      <section id="role-committer">
        <title>Committer</title>

        <para>A Committer is a developer that was given write access to the
        code repository and has a signed Contributor License Agreement (CLA)
        which is described in detail in the IP rights documentation. Not
        needing to depend on other people for the patches, they are actually
        making short-term decisions for the project. The PMC can (even
        tacitly) agree and approve it into permanency, or they can reject it.
        Remember that the PMC makes the decisions, not the individual
        people.</para>
      </section>

      <section>
        <title>User</title>

        <para>A User is someone that uses Mindquarry software. Users
        contribute to Mindquarry by providing feedback to developers in the
        form of bug reports and feature suggestions. Users participate in the
        Mindquarry community by helping other users on mailing lists and user
        support forums.</para>
      </section>

      <section>
        <title>Test User</title>

        <para>A test user is a chosen user that is involved in the UCD
        process. He or she represents typical users/customers and will be
        chosen by Mindquarry and the UCD team.</para>
      </section>
    </section>

    <section>
      <title>Documentation</title>

      <para>Documentation artifacts are managed by using an existing
      installation of Mindquarry's Collaboration Server. This means that wiki
      pages and documents managed by the document management are used to
      describe concepts like system architecture or the build process.</para>
    </section>

    <section>
      <title>Communication</title>

      <para>Communication is done via the community forum on the
      Mindquarry.com website and instant messaging for now. Later Mindquarry's
      conversation system will be used to manage conversations about
      development. Whenever possible, there should be a moderator for key
      discussions.</para>
    </section>

    <section>
      <title>Decision Making</title>

      <para>Long term decisions are made by the PMC by setting the rules,
      goals and requirements in the evaluation period of each release cycle.
      Short term decisions are done by voting on a conversation (mailing
      list). Voting duration is 72 hours from the voting request, after that
      additional voting's are rejected.</para>

      <itemizedlist>
        <listitem>
          <para>+1 means voting with yes</para>
        </listitem>

        <listitem>
          <para>+0 means no vote</para>
        </listitem>

        <listitem>
          <para>-1 means voting with no, there must be an important reason for
          that</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section>
    <title>Guidelines</title>

    <para>The following guidelines are applied to the development of
    Mindquarry' software products.</para>

    <section>
      <title>Versioning Guidelines</title>

      <para>There are two types of versions: the versions of the many small
      projects represented as maven modules and the major versions of the
      final packages that are for the end-user.</para>

      <section>
        <title>Maven Module Versions</title>

        <para>The version scheme is based on Maven's conventions for
        versioning. Note that this scheme description is still in progress.
        The template for release version numbers is as follows: A.B.C</para>

        <itemizedlist>
          <listitem>
            <para>A: identification number of the global release (is
            incremented with every release)</para>
          </listitem>

          <listitem>
            <para>B: identification number of the current interface version
            (should be incremented when the interface has changed).</para>
          </listitem>

          <listitem>
            <para>C. identification number of the current build (should be
            increased when functionality is changed, new features are added or
            bug fixes are integrated)</para>
          </listitem>
        </itemizedlist>

        <para>There are milestone versions before an A.0 or A.B release that
        are suffixed by -Mn. For example, prior to the 1.2 release, there are
        1.2-M1 and maybe 1.2-M2 milestones. There should not be milestone
        versions for A.B.C versions.</para>
      </section>

      <section>
        <title>Package Versions</title>

        <para>These version numbers are more arbitrary and defined under the
        aspects of marketing. They should appeal to end-users and are
        integrated with the services provided by the Mindquarry
        company.</para>
      </section>
    </section>

    <section>
      <title>Namespace Guidelines</title>

      <para>The following namespace guidelines should be applied:</para>

      <section>
        <title>Maven</title>

        <para>The following schema should be used for Maven projects.</para>

        <programlisting language="xml">&lt;groupId&gt;com.mindquarry.<replaceable>product</replaceable>&lt;/groupId&gt;
&lt;artifactId&gt;<replaceable>component</replaceable>&lt;/artifactId&gt;
&lt;version&gt;<replaceable>A</replaceable>.<replaceable>B</replaceable>.<replaceable>C</replaceable>&lt;/version&gt;</programlisting>
      </section>

      <section>
        <title>XML and Ontologies</title>

        <para>The following schema should be used for naming XSDs and
        ontologies.</para>

        <programlisting>http://www.mindquarry.com/ns/<replaceable>LANG</replaceable>/<replaceable>DOMAIN</replaceable>/<replaceable>VERSION</replaceable></programlisting>

        <itemizedlist>
          <listitem>
            <para>LANG conventions:</para>

            <itemizedlist>
              <listitem>
                <para><emphasis>ontology</emphasis>: for ontology
                naming</para>
              </listitem>

              <listitem>
                <para><emphasis>schema</emphasis>: for XSD naming</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </itemizedlist>
      </section>
    </section>

    <section>
      <title>Java</title>

      <para>The Mindquarry Coding Style Conventions for the Java Programming
      Language are based on <ulink
      url="http://java.sun.com/docs/codeconv/">Code Conventions for the
      <trademark class="registered">Java</trademark> Programming
      Language</ulink> edited by <trademark class="registered">Sun
      Microsystems</trademark>.</para>

      <para>Additional Conventions:</para>

      <itemizedlist>
        <listitem>
          <para>Use only spaces for indentation (no tabs).</para>
        </listitem>

        <listitem>
          <para>Use 4 space for each indentation level.</para>
        </listitem>
      </itemizedlist>

      <para>Additional conventions and each kind of modification are subject
      to votings. Simple majority is needed, but the CTO can veto. The veto is
      to be discussed in regards to a wider open source community.</para>

      <section>
        <title>License header for Java files</title>

        <programlisting>/*
 * Copyright (C) 2006-2007 Mindquarry GmbH, All Rights Reserved
 *
 * The contents of this file are subject to the Mozilla Public License
 * Version 1.1 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific language governing rights and limitations
 * under the License.
 */</programlisting>
      </section>
    </section>

    <section>
      <title>XML</title>

      <para>The following conventions apply to all XML files:</para>

      <para><itemizedlist>
          <listitem>
            <para>Use only tabs for indentation (no spaces).</para>
          </listitem>

          <listitem>
            <para>Encode in UTF-8.</para>
          </listitem>
        </itemizedlist></para>

      <section>
        <title>License header for XML files</title>

        <programlisting>&lt;!--
  Copyright (C) 2006-2007 Mindquarry GmbH, All Rights Reserved

  The contents of this file are subject to the Mozilla Public License
  Version 1.1 (the "License"); you may not use this file except in
  compliance with the License. You may obtain a copy of the License at
  http://www.mozilla.org/MPL/

  Software distributed under the License is distributed on an "AS IS"
  basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
  License for the specific language governing rights and limitations
  under the License.
--&gt;</programlisting>
      </section>
    </section>
  </section>
</article>