<?xml version="1.0" encoding="UTF-8"?>
<!--
	Copyright (C) 2006 MindQuarry GmbH, All Rights Reserved
-->
<sitemap xmlns="http://apache.org/cocoon/sitemap/1.0">

	<!-- TASKS -->

	<components>
		<actions>
			<action name="log"
				src="com.mindquarry.webapp.acting.DebugLogAction" />
			<action name="log-params"
				src="com.mindquarry.webapp.acting.LogParametersAction" />

			<action name="httpauth"
				src="com.mindquarry.webapp.auth.HttpAuthAction" />
		</actions>

		<selectors>
			<selector name="lightbox-request"
				src="com.mindquarry.webapp.ajax.LightboxRequestSelector" />
			<selector name="ajax-request"
				src="org.apache.cocoon.ajax.AjaxRequestSelector" />

			<selector name="REST"
				src="org.apache.cocoon.selection.RegexpHeaderSelector">
				<header-name>accept</header-name>
				<pattern name="xhtml">application/xhtml\+xml</pattern>
				<pattern name="html">text/html</pattern>
				<pattern name="xml">text/xml</pattern>
			</selector>
		</selectors>

		<generators default="file">
			<generator name="collection"
				src="org.apache.cocoon.generation.TraversableGenerator" />
		</generators>

		<transformers>
			<transformer name="clear"
				src="com.mindquarry.webapp.transforming.ClearAndGenerateTransformer" />
		</transformers>
	</components>

	<resources>
		<resource name="layouting">
			<transform src="block:resources:/xslt/html2html.xsl">
				<parameter name="fullPath"
					value="{block-path:}{request:pathInfo}" />
				<parameter name="sitemapPath"
					value="{request:pathInfo}" />
				<parameter name="user.agent"
					value="{request-header:User-Agent}" />
			</transform>
			<serialize type="html" />
		</resource>
	</resources>

	<flow language="javascript">
		<!-- TODO: this is generic and could be put into webapp-resources,
			but how to reference it? block:super:/flows/teamspaces-for-user.js -->
		<script src="flows/teamspaces-for-user.js" />
	</flow>

	<pipelines>
		<!-- resources pipeline / use noncaching for debugging -->
		<pipeline type="noncaching">
			<match pattern="css/*.css">
				<select type="resource-exists">
					<when test="css/{1}.css">
						<!-- if it exists, load it from this sitemap's resources -->
						<read src="css/{1}.css" />
					</when>
					<!-- if not, look in the super block -->
					<otherwise>
						<read src="block:resources:/css/{1}.css" />
					</otherwise>
				</select>
			</match>

			<match pattern="xslt/*.xsl">
				<select type="resource-exists">
					<when test="xslt/{1}.xsl">
						<!-- if it exists, load it from this sitemap's resources -->
						<read src="xslt/{1}.xsl" />
					</when>
					<!-- if not, look in the resources block -->
					<otherwise>
						<read src="block:resources:/xslt/{1}.xsl" />
					</otherwise>
				</select>
			</match>

			<match pattern="scripts/*.js">
				<select type="resource-exists">
					<when test="scripts/{1}.js">
						<read src="scripts/{1}.js" />
					</when>
					<otherwise>
						<read src="block:resources:/scripts/{1}.js" />
					</otherwise>
				</select>
			</match>

			<match pattern="images/*.*">
				<select type="resource-exists">
					<when test="images/{1}.{2}">
						<read src="images/{1}.{2}" />
					</when>
					<otherwise>
						<read src="block:resources:/images/{1}.{2}" />
					</otherwise>
				</select>
			</match>

			<match pattern="buttons/*.*">
				<select type="resource-exists">
					<when test="buttons/{1}_button.{2}">
						<read src="buttons/{1}_button.{2}" />
					</when>
					<otherwise>
						<read src="block:resources:/buttons/{1}.{2}" />
					</otherwise>
				</select>
			</match>

			<match pattern="icons/*x*/*/*.png">
				<select type="resource-exists">
					<when test="icons/{1}x{2}/{3}/{4}.png">
						<read src="icons/{1}x{2}/{3}/{4}.png" />
					</when>
					<otherwise>
						<read
							src="block:resources:/icons/{1}x{2}/{3}/{4}.png" />
					</otherwise>
				</select>
			</match>
		</pipeline>

		<!-- overriding dforms block matcher -->
		<pipeline type="noncaching">

			<!-- @virtual: for even more specific sub-blocks ;-) -->
			<match pattern="tasks-dforms-model-directory.xml">
				<generate type="collection" src="dforms-model" />
				<transform
					src="block:super:/collection2resourceincludes.xsl" />
				<serialize type="xml" />
			</match>

			<!-- @override: provide the model as directory listing for the dforms block -->
			<match pattern="dforms-model-directory.xml">
				<!-- we want our models and the inherited models -->
				<aggregate element="resources">
					<part src="block:super:/dforms-model-directory.xml" />
					<part src="block:/tasks-dforms-model-directory.xml" />
				</aggregate>
				<serialize type="xml" />
			</match>

		</pipeline>

		<!-- REST REST REST REST REST REST REST REST REST REST REST REST -->

		<!-- special REST content type pipelines, these are internal -->

		<!-- teamspacesTasksOverview -->
		<pipeline type="noncaching" internal-only="true">

			<!-- raw XML -->
			<match pattern="internal/pipe/list.xml">
				<!-- httpauth done here again to provide the username -->
				<act type="httpauth">
					<call function="listTeamspacesForUser">
						<parameter name="username" value="{username}" />
						<parameter name="target"
							value="internal/pipe/flowed/teamspaces-task-overview.xml" />
					</call>
				</act>
			</match>

			<!-- target pipeline for list.xml -->
			<match
				pattern="internal/pipe/flowed/teamspaces-task-overview.xml">
				<!-- TODO: this can be made generic, put into webapp-resources -->
				<generate src="jx/teamspaces.jx" type="jx" />
				<transform src="xslt/xml/teamspaces2tasks.xsl">
					<parameter name="base"
						value="http://{request:serverName}:{request:serverPort}{request:servletPath}/" />
				</transform>
				<transform type="xinclude" />
				<transform src="xslt/xml/flatten-tasks-element.xsl" />
				<serialize type="xml" />
			</match>

			<!-- HTML (which is different from the xml content) -->
			<match pattern="internal/pipe/list.html">
				<!-- httpauth done here again to provide the username -->
				<act type="httpauth">
					<call function="listTeamspacesForUser">
						<parameter name="username" value="{username}" />
						<parameter name="target"
							value="internal/pipe/flowed/teamspaces-task-overview.html" />
					</call>
				</act>
			</match>

			<!-- target pipeline for list.html -->
			<match
				pattern="internal/pipe/flowed/teamspaces-task-overview.html">
				<!-- TODO: this can be made generic, put into webapp-resources -->
				<generate src="jx/teamspaces.jx" type="jx" />
				<transform
					src="xslt/html/teamspaces-task-overview.xsl">
					<parameter name="fullPath"
						value="{block-path:}{request:pathInfo}" />
					<parameter name="sitemapPath"
						value="{request:pathInfo}" />
				</transform>
				<call resource="layouting" />
			</match>

		</pipeline>

		<!-- tasksForTeamspace -->
		<pipeline type="noncaching" internal-only="true">

			<!-- raw XML-->
			<match pattern="internal/pipe/*/list.xml">
				<act type="log" src="***** list.xml {1}" />
				<!-- TODO: do authorization here -->
				<select type="resource-exists">
					<when test="jcr:///teamspaces/{1}/tasks/">
						<generate
							src="cocoon:/internal/pipe/{1}/existing-list.xml" />
						<serialize type="xml" />
					</when>
					<otherwise>
						<generate src="jx/createdir.jx" type="jx">
							<parameter name="dir"
								value="jcr:///teamspaces/{1}/tasks" />
						</generate>
						<transform type="write-source" />
						<transform type="clear"
							src="cocoon:/internal/pipe/{1}/existing-list.xml" />
						<serialize type="xml" />
					</otherwise>
				</select>
			</match>

			<match pattern="internal/pipe/*/existing-list.xml">
				<act type="log" src="***** existing-list.xml {1}" />
				<generate type="collection"
					src="jcr:///teamspaces/{1}/tasks/" />
				<transform src="xslt/xml/collection2tasklist.xsl">
					<parameter name="base"
						value="http://{request:serverName}:{request:serverPort}{request:servletPath}/{1}/" />
				</transform>
				<serialize type="xml" />
			</match>

			<!-- HTML -->
			<match pattern="internal/pipe/*/list.html">
				<act type="log" src="***** list.html {1}" />
				<generate src="cocoon:/internal/pipe/{1}/list.xml" />
				<transform src="xslt/html/tasks-for-teamspace.xsl">
					<parameter name="teamspaceID" value="{1}" />
				</transform>
				<call resource="layouting" />
			</match>
		</pipeline>

		<!-- Let's do it the REST way -->
		<pipeline type="noncaching">

			<!-- list of teamspaces with the tasks overview (teamspacesTaskOverview) -->
			<match pattern="">
				<act type="httpauth">
					<select type="REST">
						<when test="html">
							<read src="cocoon:/internal/pipe/list.html" />
						</when>
						<when test="xml">
							<read src="cocoon:/internal/pipe/list.xml" />
						</when>
						<otherwise>
							<read src="cocoon:/internal/pipe/list.html" />
						</otherwise>
					</select>
				</act>
			</match>

			<!-- list of tasks per teamspace {1} (tasksForTeamspace) -->
			<match pattern="*/">
				<act type="httpauth">
					<select type="REST">
						<when test="html">
							<act type="log" src="***** html {../1}" />
							<read src="cocoon:/internal/pipe/{../1}/list.html" />
						</when>
						<when test="xml">
							<read src="cocoon:/internal/pipe/{../1}/list.xml" />
						</when>
						<otherwise>
							<read src="cocoon:/internal/pipe/{../1}/list.html" />
						</otherwise>
					</select>
				</act>
			</match>

			<!--+
				| URL for a task in a certain teamspace:
				| .../tasks/<teamspace-id>/<task-id>
				|
				| JCR path for the task:
				| /teamspaces/<teamspace-id>/tasks/<task-id>
				+-->

			<match pattern="*/*.edit.*.continue">
				<act type="log-params" />
				<act type="httpauth">
					<read
						src="block:super:/{../3}.continue?callerFullPath={url-encode:{block-path:}{request:pathInfo}}&amp;callerSitemapPath={url-encode:{request:pathInfo}}&amp;baseURI={url-encode:jcr:///teamspaces/{../1}/tasks/}&amp;documentID={url-encode:{../2}}&amp;{params-as-uri:request-param}" />
				</act>
			</match>

			<match pattern="*/*.edit">
				<!-- only html version available -->
				<act type="httpauth">
					<read
						src="block:super:/edit-document?callerFullPath={url-encode:{block-path:}{request:pathInfo}}&amp;callerSitemapPath={url-encode:{request:pathInfo}}&amp;baseURI={url-encode:jcr:///teamspaces/{../1}/tasks/}&amp;documentID={url-encode:{../2}}" />
				</act>
			</match>

			<match pattern="*/*">
				<act type="httpauth">
					<select type="request-method">
						<when test="GET">
						
							<select type="REST">
								<when test="html">
									<read
										src="block:super:/show-or-edit-document?callerFullPath={url-encode:{block-path:}{request:pathInfo}}&amp;callerSitemapPath={url-encode:{request:pathInfo}}&amp;baseURI={url-encode:jcr:///teamspaces/{../1}/tasks/}&amp;documentID={url-encode:{../2}}" />
								</when>
								<when test="xml">
									<generate
										src="jcr:///teamspaces/{../1}/tasks/{../2}.xml" />
									<transform
										src="xslt/xml/ductform2task.xsl">
										<parameter name="base"
											value="http://{request:serverName}:{request:serverPort}{request:servletPath}/{../1}/{../2}" />
									</transform>
									<serialize type="xml" />
								</when>
							</select>
							
						</when>
						<when test="PUT">
							<act type="log" src="put" />
							<generate type="stream">
								<parameter name="defaultContentType"
									value="text/xml" />
							</generate>
							<transform src="xslt/xml/task2ductform.xsl" />
							<transform src="xslt/xml/wrap-for-sourcewriting.xsl">
								<parameter name="path" value="jcr:///teamspaces/{../1}/tasks/{../2}.xml" />
							</transform>
							<transform type="write-source" />
							<serialize type="xml" />
						</when>
					</select>
				</act>
			</match>

		</pipeline>

		<!-- =========================================================== -->

		<pipeline type="noncaching">
			<!-- @override: for inheriting sitemap resources -->
			<match pattern="resource/**">
				<select type="resource-exists">
					<!-- if it exists, load it from this sitemap's resources -->
					<when test="{1}">
						<read src="{1}" />
					</when>
					<!-- if not, look in the super block -->
					<otherwise>
						<read src="block:super:/resource/{1}" />
					</otherwise>
				</select>
			</match>

			<!--+
				| forward any unknown stuff to the super block 
				| NOTE: This must be the last matcher!
				+-->
			<match pattern="**">
				<read src="block:super:/{1}" />
			</match>

		</pipeline>
	</pipelines>

</sitemap>

