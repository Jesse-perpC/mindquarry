/*
 * Copyright (C) 2006-2007 Mindquarry GmbH, All Rights Reserved
 * 
 * The contents of this file are subject to the Mozilla Public License
 * Version 1.1 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific language governing rights and limitations
 * under the License.
 */
package com.mindquarry.webapp.modules;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.Map.Entry;

import org.apache.avalon.framework.configuration.Configuration;
import org.apache.avalon.framework.configuration.ConfigurationException;
import org.apache.cocoon.components.modules.input.AbstractInputModule;
import org.springframework.core.io.DefaultResourceLoader;
import org.springframework.core.io.Resource;
import org.springframework.web.context.support.ServletContextResourcePatternResolver;

/**
 * Gets the properties from a Maven pom.properties file included in jars.
 * The format for the attribute names is:
 * <pre>
 *  groupId/artifactId/property
 * </pre>
 * 
 * For example, to retrieve the version of the mindquarry-common project:
 * <pre>
 *  {pom-property:com.mindquarry.common/mindquarry-common/version}
 * </pre>
 * 
 * All properties are cached since it is assumed that the pom.properties file
 * inside a jar does not change during runtime.
 * 
 * @author <a href="mailto:alexander(dot)klimetschek(at)mindquarry(dot)com">
 *         Alexander Klimetschek</a>
 *
 */
public class MavenPomPropertiesModule extends AbstractInputModule {
    
    private Map<String, String> propertyCache = new HashMap<String, String>();

    private final ServletContextResourcePatternResolver resolver =
        new ServletContextResourcePatternResolver(new DefaultResourceLoader());
    
    @Override
    public Object getAttribute(final String name, Configuration config, Map objectModel) throws ConfigurationException {
        // check cache first
        if (propertyCache.containsKey(name)) {
            return propertyCache.get(name);
        }
        
        int splitPos = name.lastIndexOf('/');
        if (splitPos < 0) {
            return null;
        }
        
        String pomName = name.substring(0, splitPos);
        String propertyName = name.substring(splitPos+1);
        
        // we are using Spring's resource lib for access to the stuff below
        // META-INF where maven puts the pom.properties during jar packaging
        String pomPath = "classpath:/META-INF/maven/" + pomName + "/pom.properties";
        
        Properties pomProperties = new Properties();
        try {
            // load the properties set normally in the pom.properties file
            Resource resource = resolver.getResource(pomPath);
            InputStream stream = resource.getInputStream();
            
            if (stream != null) {
                pomProperties.load(stream);
            }
            
            // Dirty hack: the time stamp is stored by maven in the comments
            // at the top of the properties file. An example:
            /*
                #Generated by Maven
                #Sun Feb 04 22:32:52 CET 2007
                version=1.0-M1-SNAPSHOT
                groupId=com.mindquarry.teamspace
                artifactId=mindquarry-teamspace
            */

            BufferedReader text = new BufferedReader( new InputStreamReader(resource.getInputStream()) );
            String line = null;
            Date date = null;
            while (( line = text.readLine()) != null) {
                if (line.startsWith("#")) {
                    String possibleDate = line.substring(1).trim();
                    
                    // example for pattern: Sun Feb 04 22:32:52 CET 2007
                    SimpleDateFormat mavenDateFormat = new SimpleDateFormat("EEE MMM dd HH:mm:ss z yyyy", Locale.ENGLISH);
                    try {
                        date = mavenDateFormat.parse(possibleDate);
                        break; // no exception -> done
                    } catch (ParseException e) {
                        continue;
                    }
                }
            }
            
            SimpleDateFormat propertyDateFormat = new SimpleDateFormat("yyyy.MM.dd-HH:mm:ss", Locale.ENGLISH);
            pomProperties.setProperty("timeStamp", propertyDateFormat.format(date));

            // put all properties in the cache
            for (Entry<Object, Object> entry : pomProperties.entrySet()) {
                propertyCache.put(pomName + "/" + (String) entry.getKey(), (String) entry.getValue());
            }
            
        } catch (IOException e) {
            throw new ConfigurationException("Could not load pom.properties (" + pomPath + ")", e);
        }
        
        return pomProperties.getProperty(propertyName);
    }

}
