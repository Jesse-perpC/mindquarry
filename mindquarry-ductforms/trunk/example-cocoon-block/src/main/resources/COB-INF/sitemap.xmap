<?xml version="1.0" encoding="UTF-8"?>
<!--
	Copyright 2006 The Apache Software Foundation
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
-->
<map:sitemap xmlns:map="http://apache.org/cocoon/sitemap/1.0">
	<map:components>
		<map:transformers default="xslt">
			<map:transformer name="xmldb"
				src="org.apache.cocoon.transformation.XMLDBTransformer">
				<!-- using monetdb database -->
				<!-- 
					<driver>nl.cwi.monetdb.xmldb.base.MonetDBDatabase</driver>
					<user>monetdb</user>
					<password>monetdb</password>
				-->
				<driver>org.exist.xmldb.DatabaseImpl</driver>
				<base>xmldb:exist:///db</base>
			</map:transformer>
			<!-- the browser-update transformer is needed for AJAX -->
			<map:transformer name="browser-update"
				src="org.apache.cocoon.ajax.BrowserUpdateTransformer" />
			<!-- this is obviously for internationalization -->
			<map:transformer name="i18n"
				src="org.apache.cocoon.transformation.I18nTransformer">
				<!-- neccessary resources for internationalization -->
				<catalogues default="other">
					<catalogue id="other" name="OtherMessages"
						location="messages" />
					<catalogue id="forms" name="messages"
						location="resource://org/apache/cocoon/forms/system/i18n" />
				</catalogues>
				<cache-at-startup>true</cache-at-startup>
			</map:transformer>


		</map:transformers>

		<map:selectors>
			<!-- this selector returns true if there is an ajax request -->
			<map:selector name="ajax-request"
				src="org.apache.cocoon.ajax.AjaxRequestSelector" />
		</map:selectors>

	</map:components>

	<map:flow language="javascript">
		<map:script src="demo.js" />
		<map:script src="post.js" />
	</map:flow>

	<map:pipelines>
		<map:pipeline>
			<!-- 
				<map:match pattern="">
				<map:generate src="xhtml/welcome.html" />
				<map:transform src="xslt/html/html2html.xsl">
				<map:parameter name="" value="" />
				</map:transform>
				<map:serialize />
				</map:match>
				
			-->

			<!-- populate the xml database -->
			<map:match pattern="populate">
				<map:generate src="xmldb/populate.xml" />
				<map:transform type="xmldb" />
				<!-- show status messages -->
				<map:transform src="xslt/xmldb/populate2html.xsl" />
				<map:serialize />
			</map:match>



			<map:match pattern="*.xml">
				<!-- test for existance of a job -->
				<map:select type="resource-exists">
					<!-- if it exists, show the HTML -->
					<map:when
						test="xmldb:exist:///db/test/{1}.xml">
						<map:generate
							src="xmldb:exist:///db/test/{1}.xml" />
						<map:transform type="html">
							<map:parameter name="tags"
								value="description" />
						</map:transform>
						<map:transform src="xslt/html/job2html.xsl" />

						<map:transform src="xslt/html/html2html.xsl" />
						<map:serialize type="html" />
					</map:when>
					<!-- if not, show a job posting form -->
					<map:otherwise>
						<map:call function="handleForm">
							<map:parameter name="function"
								value="addJob" />
							<map:parameter name="jobname" value="{1}" />
							<!-- in the original example this was configurable -->
							<!-- <map:parameter name="renderMode" value="jx" /> -->
							<map:parameter name="definitionURI"
								value="forms/jobs.xml" />
						</map:call>
					</map:otherwise>
				</map:select>
			</map:match>

			<map:match pattern="">
				<!-- test for existance of a database collection -->
				<map:select type="resource-exists">
					<!-- if it exists, show the list of jobs -->
					<map:when test="xmldb:exist:///db/test/">
						<map:generate
							src="xmldb:exist:///db/test/" />
						<map:transform
							src="xslt/xmldb/collection2new.xsl" />
						<map:transform
							src="xslt/xmldb/collection2aggregate.xsl" />
						<map:transform type="cinclude" />
						<map:transform
							src="xslt/html/aggregate2html.xsl" />
						<map:transform src="xslt/html/html2html.xsl" />
						<map:serialize />
					</map:when>
					<map:otherwise>
						<map:generate src="xmldb/populate.xml" />
						<map:transform type="xmldb" />
						<map:transform
							src="xslt/xmldb/populate2html.xsl" />
						<map:serialize />
					</map:otherwise>
				</map:select>
			</map:match>



			<!--
				| Show a form, using the jx template macros
			-->
			<map:match pattern="forms/*">
				<map:generate type="jx" src="forms/{1}_template.xml"
					label="content1">
					<map:parameter name="locale"
						value="{flow-attribute:locale}" />
				</map:generate>
				<map:transform type="browser-update" />
				<map:transform type="i18n">
					<map:parameter name="locale" value="en_US" />
				</map:transform>
				<!-- if you are not using XHTML as the base of the form template,
					you should add a transformer here. -->
				<map:transform src="xslt/html/html2html.xsl" />

				<map:transform src="xslt/forms/form2html.xsl">
					<map:parameter name="resources-uri"
						value="{request:contextPath}/_cocoon/resources" />
				</map:transform>


				<map:transform type="i18n">
					<map:parameter name="locale" value="en_US" />
				</map:transform>


				<map:select type="ajax-request">
					<map:when test="true">
						<map:serialize type="xml" />
					</map:when>
					<map:otherwise>
						<map:serialize type="html" />
					</map:otherwise>
				</map:select>
			</map:match>

			<map:match pattern="resources/*/**">
				<map:read src="{1}/{2}" />
			</map:match>

			<!-- Continue a scenario. The continuation id is passed in the URL
				(typically used for GET requests) -->
			<map:match pattern="*.continue">
				<map:call continuation="{1}" />
			</map:match>

			<!-- Continue a scenario. The continuation id is passed as a request
				parameter (typically used for POST request) -->
			<map:match pattern="continue">
				<map:call
					continuation="{request-param:continuation-id}" />
			</map:match>

		</map:pipeline>


	</map:pipelines>

</map:sitemap>

